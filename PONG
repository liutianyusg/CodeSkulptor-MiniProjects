# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    if direction is True:
        ball_vel = [-1,1]
    else:
        ball_vel = [1,1]
        
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    global counter
    paddle1_pos = [PAD_WIDTH/2,HEIGHT/2]
    paddle2_pos = [WIDTH-PAD_WIDTH/2,HEIGHT/2]
    paddle1_vel = [0,0]
    paddle2_vel = [0,0]
    spawn_ball(RIGHT)
    score1 = 0
    score2 = 0
    counter = 0

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,counter
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    if ball_pos[1] == BALL_RADIUS or ball_pos[1] == HEIGHT-BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    
    ball_pos [0] = ball_pos [0] + ball_vel[0]*(counter+1)/2
    ball_pos [1] = ball_pos [1] + ball_vel[1]*(counter+1)/2
            
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS,1.5,"White","White")
    
    # update paddle's vertical position, keep paddle on the screen
    
    #if ((paddle1_pos[1] > PAD_HEIGHT / 2) and (paddle1_pos[1] < HEIGHT - PAD_HEIGHT / 2):
    paddle1_pos[1] = paddle1_pos[1] + paddle1_vel[1]
    #if (paddle2_pos[1] > PAD_HEIGHT / 2) and (paddle2_pos[1] < HEIGHT - PAD_HEIGHT / 2):
    paddle2_pos[1] = paddle2_pos[1] + paddle2_vel[1]
    
    
    # draw paddles
    canvas.draw_line([paddle1_pos[0],paddle1_pos[1]-PAD_HEIGHT/2], [paddle1_pos[0],paddle1_pos[1]+PAD_HEIGHT/2],PAD_WIDTH , 'White')    
    canvas.draw_line([paddle2_pos[0],paddle2_pos[1]-PAD_HEIGHT/2], [paddle2_pos[0],paddle2_pos[1]+PAD_HEIGHT/2],PAD_WIDTH , 'White')    
    
    # determine whether paddle and ball collide    
    if (ball_pos[0] - BALL_RADIUS <= PAD_WIDTH): 
        if (ball_pos[1] <= paddle1_pos[1]+PAD_HEIGHT/2) and (ball_pos[1] >= paddle1_pos[1]-PAD_HEIGHT/2):
            ball_vel[0] = -ball_vel[0]
            counter +=1
        else:
            score2 +=1
            counter = 0
            spawn_ball(LEFT)
    
    
    if (ball_pos[0] + BALL_RADIUS >= WIDTH-PAD_WIDTH):
        if (ball_pos[1] <= paddle2_pos[1]+PAD_HEIGHT/2) and (ball_pos[1] >= paddle2_pos[1]-PAD_HEIGHT/2):
            ball_vel[0] = -ball_vel[0]
            counter +=1
        else:
            score1 +=1
            counter = 0
            spawn_ball(RIGHT)
    
    # draw scores
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    vel = 4
    if key == simplegui.KEY_MAP["up"]:
        paddle1_vel[1] -= vel
    elif key == simplegui.KEY_MAP["down"]:
        paddle1_vel[1] += vel
        
    if key == simplegui.KEY_MAP["w"]:
        paddle2_vel[1] -= vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle2_vel[1] += vel
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["up"]:
        paddle1_vel[1] = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle1_vel[1] = 0
    if key == simplegui.KEY_MAP["w"]:
        paddle2_vel[1] = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle2_vel[1] = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
