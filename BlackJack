# Mini-project #6 - Blackjack
# http://www.codeskulptor.org/#user43_b09fHaavnd_32.py

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
# Hand class testing file: http://www.codeskulptor.org/#user43_KwIKac4G1G_0.py
class Hand:
    def __init__(self):
        self.hand = []
        
        pass	# create Hand object

    def __str__(self):
        s = "Hand Contains "
        for i in range(len(self.hand)):
            s += self.hand[i].get_suit()
            s += self.hand[i].get_rank()+" "
        return s
        pass	# return a string representation of a hand

    def add_card(self, card):
        self.hand.append(card)
        pass	# add a card object to a hand

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        has_one = False
        value = 0
        for card in self.hand:
            if card.get_rank() =='A':
                has_one = True
            value += VALUES.get(card.get_rank())
        if has_one and value + 10 < 21:
            return value + 10
        else:
            return value            
        pass	# compute the value of the hand, see Blackjack video
    
    def get_len(self):
        return len(self.hand)
    
    def draw(self, canvas, pos):
        i = 0
        for card in self.hand:
            card.draw(canvas, [pos[0]+100 * i,pos[1]])
            i += 1
        pass	# draw a hand on the canvas, use the draw method for cards
     
# define deck class
# Deck class testing file: http://www.codeskulptor.org/#user43_NPY7GMxw8p_0.py
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(suit,rank))
        pass	# create a Deck object

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)
        pass    # use random.shuffle()

    def deal_card(self):
        deal = self.deck[-1]
        self.deck.pop(-1)
        return deal
        pass	# deal a card object from the deck
    
    def __str__(self):
        s = ""
        for card in self.deck:
            s+= str(card) +" "
        return s
        pass	# return a string representing the deck
    def get_len(self):
        return len(self.deck)



#define event handlers for buttons
def deal():
    global outcome, in_play
    global my_deck, player_hand, dealer_hand
    
    print "##################################"
    
    my_deck = Deck()
    my_deck.shuffle()
    outcome = ""
    in_play = False

    player_hand = Hand()
    dealer_hand = Hand()
    player_hand.add_card(my_deck.deal_card())
    dealer_hand.add_card(my_deck.deal_card())
    player_hand.add_card(my_deck.deal_card())
    dealer_hand.add_card(my_deck.deal_card())
    
    ###########################################
    print "player: " + str(player_hand)
    print "dealer: " + str(dealer_hand)
    print my_deck
    print my_deck.get_len()
    ###########################################

    in_play = True

def hit():
    global player_hand, in_play, score, outcome
    
    # if the hand is in play, hit the player
    if in_play:
        player_hand.add_card(my_deck.deal_card())
    
    # if busted, assign a message to outcome, update in_play and score
    if (player_hand.get_value() > 21):
        outcome = "You have busted!!"
        score -= 1
        in_play = False
    ##############################################################################
    print "player: " + str(player_hand) + "total: " + str(player_hand.get_value())
    print "dealer: " + str(dealer_hand) + "total: " + str(dealer_hand.get_value())
    print outcome
    print score
    ##############################################################################
def stand():
    global dealer_hand, player_hand, in_play, score, outcome
    
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play :
        while (dealer_hand.get_value() < 17) :
            dealer_hand.add_card(my_deck.deal_card())
      
    # assign a message to outcome, update in_play and score
    if player_hand.get_value() > 21 :
        outcome = "You have busted!"
        score -= 1
    else:
        if dealer_hand.get_value() > 21 :
            outcome = "You have won the game!"
            score += 1
        else:
            if player_hand.get_value() > dealer_hand.get_value() :
                outcome = "You have won the game!"
                score += 1
            else:
                outcome = "You have lost the game!"
                score -= 1
    in_play = False
    print "player: " + str(player_hand) + "total: " + str(player_hand.get_value())
    print "dealer: " + str(dealer_hand) + "total: " + str(dealer_hand.get_value())
    print outcome
    print score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    
    canvas.draw_text("Blackjack", [240, 50], 40, "Black")
    canvas.draw_text("Score: " + str(score), [450, 100], 30, "Black")
    canvas.draw_text("Dealer", [50, 70], 20, "Black")
    canvas.draw_text("Player", [50, 350], 20, "Black")
    canvas.draw_text(outcome, [200, 550], 25, "Black")
    
    dealer_hand.draw(canvas, [100, 100])
    player_hand.draw(canvas, [100, 400])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [100 + CARD_CENTER[0], 100 + CARD_CENTER[1]],CARD_SIZE)
    
    if in_play:
        canvas.draw_text("Hit or stand?", [200, 370], 30, "Black")
    else:
        canvas.draw_text("New deal?", [200, 370], 25, "Black")

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
